# digit 1
inp w
mul x 0
add x z
mod x 26
div z 1
add x 10
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 12
mul y x
add z y

# digit 2
inp w
mul x 0
add x z
mod x 26
div z 1
add x 12
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 7
mul y x
add z y

# digit 3
inp w
mul x 0
add x z
mod x 26
div z 1
add x 10
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 8
mul y x
add z y

# digit 4
inp w
mul x 0
add x z
mod x 26
div z 1
add x 12
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 8
mul y x
add z y

# digit 5
inp w
mul x 0
add x z
mod x 26
div z 1
add x 11
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 15
mul y x
add z y

# digit 6
inp w
mul x 0
add x z
mod x 26
div z 26
add x -16
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 12
mul y x
add z y

# digit 7
inp w
mul x 0
add x z
mod x 26
div z 1
add x 10
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 8
mul y x
add z y

# digit 8
inp w
mul x 0
add x z
mod x 26
div z 26
add x -11
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 13
mul y x
add z y

# digit 9
inp w
mul x 0
add x z
mod x 26
div z 26
add x -13
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 3
mul y x
add z y

# digit 10
inp w
mul x 0
add x z
mod x 26
div z 1
add x 13
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 13
mul y x
add z y

# digit 11
inp w
mul x 0
add x z
mod x 26
div z 26
add x -8
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 3
mul y x
add z y

# digit 12
inp w
mul x 0
add x z
mod x 26
div z 26
add x -1
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 9
mul y x
add z y

# digit 13
inp w
mul x 0
add x z
mod x 26
div z 26
add x -4
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 4
mul y x
add z y

# digit 14
inp w
mul x 0
add x z
mod x 26
div z 26
add x -14
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 13
mul y x
add z y

# push digit(1) + 12
# push digit(2) + 7
# push digit(3) + 8
# push digit(4) + 8
# push digit(5) + 15
# check digit(6) == pop - 16 ==> digit(6) == digit(5) + 15 - 16 == digit(5) - 1
# push digit(7) + 8
# check digit(8) == pop - 11 ==> digit(8) == digit(7) + 8 - 11 == digit(7) - 3
# check digit(9) == pop - 13 ==> digit(9) == digit(4) + 8 - 13 == digit(4) - 5
# push digit(10) + 13
# check digit(11) == pop - 8 ==> digit(11) == digit(10) + 13 - 8 == digit(10) + 5
# check digit(12) == pop - 1 ==> digit(12) == digit(3) + 8 - 1 == digit(3) + 7
# check digit(13) == pop - 4 ==> digit(13) == digit(2) + 7 - 4 == digit(2) + 3
# check digit(14) == pop - 14 ==> digit(14) == digit(1) + 12 - 14 == digit(1) - 2

# LARGEST: assume 9 unless constant on right hand side is positive, then 9 - constant
# digit(1) == 9 ==> digit(14) == 7
# digit(2) == 6 ==> digit(13) == 9
# digit(3) == 2 ==> digit(12) == 9
# digit(4) == 9 ==> digit(9) == 4
# digit(5) == 9 ==> digit(6) == 8
# digit(7) == 9 ==> digit(8) == 6
# digit(10) == 4 ==> digit(11) == 9
#
# 1 2 3 4 5 6 7 8 9 10 11 12 13 14
# 9 6 2 9 9 8 9 6 4  4  9  9  9  7

# SMALLEST: assume 1 unless constant on right hand side is negative, then 1 - constant
# digit(1) == 3 ==> digit(14) == 1
# digit(2) == 1 ==> digit(13) == 4
# digit(3) == 1 ==> digit(12) == 8
# digit(4) == 6 ==> digit(9) == 1
# digit(5) == 2 ==> digit(6) == 1
# digit(7) == 4 ==> digit(8) == 1
# digit(10) == 1 ==> digit(11) == 6
#
# 1 2 3 4 5 6 7 8 9 10 11 12 13 14
# 3 1 1 6 2 1 4 1 1  1  6  8  4  1
